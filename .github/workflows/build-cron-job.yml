name: Build App Windows and MacOS 🧪

on:
  #schedule:
  #  - cron "0 0,12 * * 1-5"
  pull_request:
    types: [opened, synchronize, reopened, edited]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

jobs:
  build-app:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            cargo-path: |
              ~/.cargo/bin/
              ~/.cargo/registry/index/
              ~/.cargo/registry/cache/
              ~/.cargo/git/db/
              target/
            build-path: target/release/macos/Uplink.app
          - os: windows-latest
            cargo-path: |
              C:\Users\runneradmin\.cargo\bin\
              C:\Users\runneradmin\.cargo\registry\index\
              C:\Users\runneradmin\.cargo\registry\cache\
              C:\Users\runneradmin\.cargo\git\db\
              target\
            build-path: target\release\ui.exe
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout testing directory 🔖
        uses: actions/checkout@v3
        with:
          repository: Satellite-im/Uplink

      - name: Set up cargo cache 🛠️
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: ${{ matrix.cargo-path }}
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust 💿
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install Protobuf 💿
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{env.GITHUB_TOKEN}}

      - name: Run cargo update 🌐
        run: cargo update

      - name: Run cargo clean 🧹
        run: cargo clean

      - name: Build executable 🖥️
        run: cargo build --package ui --release

      - name: Upload Executable ⬆️
        uses: actions/upload-artifact@v3
        with:
          name: Uplink-${{ matrix.os }}
          path: ${{ matrix.build-path }}

  push-app:
    needs: build-app
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout testing directory 🔖
        uses: actions/checkout@v3

      - name: Download the MacOS app 🗳️
        uses: actions/download-artifact@v3
        with:
          name: Uplink-macos-latest
          path: ./apps

      - name: Download the Windows app 🗳️
        uses: actions/download-artifact@v3
        with:
          name: Uplink-windows-latest
          path: ./apps

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Pushing latest builds from Windows and MacOS apps

  test:
    needs: push-app
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            master-disable: sudo spctl --master-disable
            copy-app: |
              cp -r ./Uplink.app /Applications/
              sudo xattr -r -d com.apple.quarantine /Applications/Uplink.app
            appium-driver: |
              appium driver install mac2
              appium driver list
            delete-cache-mac: rm -rf ~/.uplink
            npm-test: mac.ci
            os-name: MacOS
          - os: windows-latest
            appium-driver: |
              appium driver install --source=npm appium-windows-driver
              appium driver list
            delete-cache-windows: If (Test-Path $home/.uplink) {Remove-Item -Recurse -Force $home/.uplink} Else { Break }
            npm-test: windows.ci
            os-name: Windows
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout testing directory 🔖
        uses: actions/checkout@v3

      - if: ${{ matrix.master-disable }}
        name: Enable opening app not codesigned 🖥️
        run: ${{ matrix.master-disable }}

      - name: Download the app 🗳️
        uses: actions/download-artifact@v3
        with:
          name: app-macos
          path: ./apps

      - if: ${{ matrix.copy-app }}
        name: Copy DMG to Appium Apps Directory 💿
        working-directory: ./apps
        run: ${{ matrix.copy-app }}

      - name: Install NPM dependencies 📦
        run: npm ci

      - name: Install Appium Server 💻
        run: |
          npm install -g appium@next
          appium -v

      - name: Install Appium Driver 💻
        run: ${{ matrix.appium-driver }}

      - if: ${{ matrix.delete-cache-mac }}
        name: Delete Cache Folder if exists - Mac
        run: ${{ matrix.delete-cache-mac }}

      - if: ${{ matrix.delete-cache-windows }}
        name: Delete Cache Folder if exists - Winbdows
        run: ${{ matrix.delete-cache-windows }}
        shell: powershell

      - name: Run WebdriverIO tests 🧪
        run: npm run ${{ matrix.npm-test }}

      - name: Publish Test Results for ${{ matrix.os-name }}
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          junit_files: "./test-report/*.xml"
          check_name: "UI Automated Test Results on ${{ matrix.os-name}}"

      - name: Upload Screenshots for ${{ matrix.os-name }} 📷
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: appium-screenshots-${{ matrix.os-name }}
          path: ./test-results

      - name: Upload Appium Log for ${{ matrix.os-name }} 📷
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: appium-log-${{ matrix.os-name }}
          path: ./appium.log
